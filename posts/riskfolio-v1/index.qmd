---
title: "Riskfolio-Lib is a python library for optimation"
description: Description goes here
author: David Harper, CFA, FRM
date: 2024-05-22
categories: [code, analysis]
engines:
  r: knitr
  python: reticulate
---

# Riskfolio-Lib is a python library for optimation

```{python}

# will cut this out after I make sure I grok the different YAML params
# ... many of which turned out to be unnecessary only AFTER I 
# upgraded Quarto to the prerelease version. So what I thought were
# YAML problems were maybe bugs
# prior v2
# jupyter: python3
# python:
# path: "D:/anaconda3/python.exe"

# initial YAML v1
# engines:
# r: default
# jupyter: python3
# format:
# html:
#    code-fold: true

import numpy as np
import pandas as pd
import riskfolio as rp
import matplotlib.pyplot as plt
import yfinance as yf
import warnings

warnings.filterwarnings("ignore")
pd.options.display.float_format = '{:.4%}'.format

# Date range
start = '2021-03-31'
end =   '2024-05-10'

# Tickers of assets

assets = ['TMHC', 'LEN', 'ESTC', 'DHI', 'INVH', 
          'GOOGL', 'COUR', 'DT', 'META', 'DDOG', 
          'HASI', 'AMH', 'DBX', 'ZUO', 'BLK',
          'DELL', 'TJX', 'O', 'STAG', 'ENB']

assets.sort()

# Downloading data
data = yf.download(assets, start = start, end = end)
data = data.loc[:,('Adj Close', slice(None))]
data.columns = assets

Y = data[assets].pct_change().dropna()

print(Y.head())

#
#

average_returns = Y.mean()
volatilities = Y.std()
cov_matrix = Y.cov()

print("Average Returns:\n", average_returns)
print("Volatilities:\n", volatilities)
print("Covariance Matrix:\n", cov_matrix)

# Building the portfolio object
port = rp.Portfolio(returns=Y)

# Calculating optimal portfolio

# Select method and estimate input parameters:

method_mu='hist' # Method to estimate expected returns based on historical data.
method_cov='hist' # Method to estimate covariance matrix based on historical data.

port.assets_stats(method_mu=method_mu, method_cov=method_cov, d=0.94)

# Estimate optimal portfolio:

model='Classic' # Could be Classic (historical), BL (Black Litterman) or FM (Factor Model)
rm = 'MV' # Risk measure used, this time will be variance
obj = 'Sharpe' # Objective function, could be MinRisk, MaxRet, Utility or Sharpe
hist = True # Use historical scenarios for risk measures that depend on scenarios
rf = 0 # Risk free rate
l = 0 # Risk aversion factor, only useful when obj is 'Utility'

w = port.optimization(model=model, rm=rm, obj=obj, rf=rf, l=l, hist=hist)

print(w)

#
# Plotting the composition of the portfolio
plt.figure(figsize=(10, 6))
ax = rp.plot_pie(w=w, title='Sharpe Mean Variance', others=0.05, 
nrow=25, cmap = "tab20", height=3, width=5, ax=None)

points = 50 # Number of points of the frontier
frontier = port.efficient_frontier(model=model, rm=rm, points=points, rf=rf, hist=hist)
print(frontier)

# Plotting the efficient frontier

label = 'Max Risk Adjusted Return Portfolio' # Title of point
mu = port.mu # Expected returns
cov = port.cov # Covariance matrix
returns = port.returns # Returns of the assets
plt.figure(figsize=(10, 6))
ax = rp.plot_frontier(w_frontier=frontier, mu=mu, cov=cov, returns=returns, rm=rm,
                      rf=rf, alpha=0.05, cmap='viridis', w=w, label=label,
                      marker='*', s=16, c='r', height=3, width=5, ax=None)

```

Now we switch to R so we can use ggplot2 (quick version, not fancy)

```{r}
#| warning: false

library(reticulate)
library(tidyverse)

frontier_r <- py$frontier # frontier_r is a dataframe: 20obs * 50vars
average_returns_r <- py$average_returns # vector length = 20
volatilities_r <- py$volatilities # vector length = 20
cov_matrix_r <- py$cov_matrix # dataframe: 20r * 20c matrix

frontier_matrix <- as.matrix(frontier_r) # 20r * 50c matrix
average_returns_matrix <- matrix(average_returns_r, nrow = 1) # 1r * 20c matrix 

# Below is (1r * 20c) * (20r * 50c) = 1r * 50c matrix
expected_returns <-  average_returns_matrix %*% frontier_matrix 

# Convert cov_matrix_r to a matrix if it's not already
cov_matrix <- as.matrix(cov_matrix_r)

# Calculate the risk (standard deviation) for each portfolio
portfolio_risks <- apply(frontier_matrix, 2, function(weights) {
  sqrt(t(weights) %*% cov_matrix %*% weights)
})

# Since expected_returns is a 1*50 matrix, convert it to a vector to match the length of portfolio_risks
expected_returns_vector <- as.vector(expected_returns)

# Create a data frame for plotting
frontier_data <- data.frame(Risk = portfolio_risks, Return = expected_returns_vector)

# Plot the efficient frontier using ggplot2
library(ggplot2)
efficient_frontier_plot <- ggplot(frontier_data, aes(x = Risk, y = Return)) +
  geom_line(color = "seagreen", size = 1) +
  theme_minimal() +
  labs(x = "Risk (Standard Deviation)", 
       y = "Expected Return", title = "Efficient Frontier (but DAILY)") +
  geom_point(color = "aquamarine", size = 2)  # Highlight each portfolio point

# Print the plot
print(efficient_frontier_plot)

```

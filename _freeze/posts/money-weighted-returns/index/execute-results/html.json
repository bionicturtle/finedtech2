{
  "hash": "3847d4fc3bb4cbd915a8e9475f599e5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Money-weighted returns\ndescription: Desc TBA\nauthor: David Harper, CFA, FRM\ndate: 2024-08-15\ncategories: [code, analysis]\nexecute: \n  echo: true\n  warning: false\n---\n\n\n\nClaude 3.5 Sonnet wrote much of this\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# library(FinancialMath)\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Parameters\ninitial_account_balance <- 10000\ninitial_price <- 100\nvolatility <- 0.2\ninitial_dividend <- 2.00  # Initial dividend is $2.00\ndividend_growth_rate <- 0.05\nyears <- 5\nrisk_free_rate <- 0.05\n\n# Generate stock prices\nstock_prices <- numeric(years)\nstock_prices[1] <- initial_price\nfor (i in 2:years) {\n  stock_prices[i] <- stock_prices[i-1] * exp(rnorm(1, mean = 0, sd = volatility))\n}\n\n# Calculate dividends\ndividends <- numeric(years)\ndividends[1] <- initial_dividend\nfor (i in 2:years) {\n  dividends[i] <- dividends[i-1] * (1 + dividend_growth_rate)\n}\n\n# Function to generate investment vector\ngenerate_investment_vector <- function() {\n  vec <- c(runif(4), 1)  # Generate 4 random numbers between 0 and 1, and add 1 at the end\n  vec[5] <- -1  # Set last element to -1 (100% divestment)\n  return(vec)\n}\n\n# Function to calculate cash flows and portfolio value\ncalculate_cash_flows <- function(investment_vector) {\n  cash_balance <- initial_account_balance\n  shares <- 0\n  cash_flows <- numeric(years)\n  cash_balance_history <- numeric(years)\n  \n  for (year in 1:years) {\n    if (year > 1) {\n      # Add dividends from previous year and grow cash balance\n      cash_balance <- cash_balance * (1 + risk_free_rate) + shares * dividends[year-1]\n    }\n    \n    cash_balance_history[year] <- cash_balance\n    \n    if (year < years) {\n      # Years 1 to 4: Potential investments\n      if (investment_vector[year] > 0) {\n        investment <- investment_vector[year] * cash_balance\n        new_shares <- investment / stock_prices[year]\n        shares <- shares + new_shares\n        cash_balance <- cash_balance - investment\n        cash_flows[year] <- -investment\n      } else {\n        cash_flows[year] <- 0\n      }\n    } else {\n      # Final year (year 5): Liquidate all shares and cash balance\n      final_value <- (shares * stock_prices[year]) + cash_balance\n      cash_flows[year] <- final_value\n    }\n  }\n  \n  return(list(cash_flows = cash_flows, cash_balance_history = cash_balance_history, final_shares = shares))\n}\n\n# Function to calculate IRR (Money-Weighted Return)\ncalculate_irr <- function(cash_flows) {\n  irr <- function(r) {\n    sum(cash_flows / (1 + r)^(0:(length(cash_flows)-1)))\n  }\n\n  # Try to find the root within a reasonable range\n  tryCatch({\n    mwr <- uniroot(irr, c(-0.9, 5))$root\n    return(mwr)\n  }, error = function(e) {\n    # If uniroot fails, return NA\n    return(NA)\n  })\n}\n\n# Function to calculate Time-Weighted Return (TWR)\ncalculate_twr <- function(stock_prices, dividends) {\n  hpr <- numeric(length(stock_prices) - 1)\n  \n  for (i in 1:(length(stock_prices) - 1)) {\n    hpr[i] <- (stock_prices[i+1] + dividends[i] - stock_prices[i]) / stock_prices[i]\n  }\n  \n  twr <- prod(1 + hpr)^(1/(length(hpr))) - 1\n  return(twr)\n}\n\n# Simulate Money-Weighted Returns (MWR) and Time-Weighted Returns (TWR)\nn_simulations <- 10000\nmwr_results <- numeric(n_simulations)\ntwr_results <- numeric(n_simulations)\nfailed_irr_count <- 0\n\n# Specific scenario\nspecific_scenario <- c(0.25, 1/3, .5, 1, -1)\nspecific_result <- calculate_cash_flows(specific_scenario)\nspecific_mwr <- calculate_irr(specific_result$cash_flows)\nspecific_twr <- calculate_twr(stock_prices, dividends)\n\ncat(\"\\nSpecific Scenario {25%, 33.3%, 50%, 100%, -100%}:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nSpecific Scenario {25%, 33.3%, 50%, 100%, -100%}:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Investment Vector:\", specific_scenario, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInvestment Vector: 0.25 0.3333333 0.5 1 -1 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Cash Flows:\", specific_result$cash_flows, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCash Flows: -2500 -2641.667 -2831.028 -3165.981 13849.5 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Cash Balance History:\", specific_result$cash_balance_history, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCash Balance History: 10000 7925 5662.055 3165.981 265.9347 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Final Shares:\", specific_result$final_shares, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFinal Shares: 114.8622 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"MWR:\", specific_mwr, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMWR: 0.09267596 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"TWR:\", specific_twr, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTWR: 0.06509625 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Run simulations\nfor (sim in 1:n_simulations) {\n  investment_vector <- generate_investment_vector()\n  result <- calculate_cash_flows(investment_vector)\n  mwr <- calculate_irr(result$cash_flows)\n  \n  if (is.na(mwr)) {\n    failed_irr_count <- failed_irr_count + 1\n  } else {\n    mwr_results[sim] <- mwr\n  }\n}\n\n# Calculate TWR (same for all simulations as it doesn't depend on cash flows)\ntwr <- calculate_twr(stock_prices, dividends)\n\n# Remove non-finite values from mwr_results\nmwr_results <- mwr_results[is.finite(mwr_results)]\n\n# Print results\ncat(\"\\nStock Prices:\", stock_prices, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nStock Prices: 100 89.39592 85.37383 116.6037 118.2597 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Dividends:\", dividends, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDividends: 2 2.1 2.205 2.31525 2.431013 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nMoney-Weighted Returns (MWR) Summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nMoney-Weighted Returns (MWR) Summary:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary(mwr_results))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.04823 0.07062 0.09255 0.10792 0.12390 0.93866 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nTime-Weighted Return (TWR):\", twr, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTime-Weighted Return (TWR): 0.06509625 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Number of failed IRR calculations:\", failed_irr_count, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNumber of failed IRR calculations: 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot\nmwr_df <- data.frame(MWR = mwr_results)\np <- ggplot(mwr_df, aes(x = MWR)) +\n    geom_density(fill = \"skyblue\", alpha = 0.7) +\n    geom_vline(aes(xintercept = twr), color = \"red\", linetype = \"dashed\", size = 1) +\n    theme_minimal() +\n    labs(title = \"Distribution of Money-Weighted Returns with Time-Weighted Return\",\n         x = \"Return\",\n         y = \"Density\") +\n    theme(plot.title = element_text(hjust = 0.5)) +\n    annotate(\"text\", x = twr, y = 0, label = \"TWR\", vjust = -1, color = \"red\") +\n    xlim(0, 0.3)\nprint(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
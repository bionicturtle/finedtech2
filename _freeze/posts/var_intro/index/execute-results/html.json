{
  "hash": "fa691d54292d1b2c703e3844614ad30b",
  "result": {
    "markdown": "---\ntitle: Value at Risk (VaR) Introduction\ndescription: Historical simulation (basic + bootstrap, MCS, and parametric)\nauthor: David Harper, CFA, FRM\ndate: 2023-11-02\ncategories: [code, analysis]\nexecute: \n  echo: true\n  warning: false\n---\n\n\n### Contents\n\n* Historical Simulation: Basic and Bootstrap\n* Monte Carlo\n* Parametric; aka, analytical\n\n## Historical simulation (HS) \n\n### Basic HS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(patchwork)\nlibrary(scales)\n\nsymbols <- c(\"PG\", \"JPM\", \"NVDA\")\nmult_stocks <- tq_get(symbols, get = \"stock.prices\", from = \"2012-12-31\", to = \"2022-12-31\")\nmult_stocks$symbol <- mult_stocks$symbol <- factor(mult_stocks$symbol, levels = c(\"PG\", \"JPM\", \"NVDA\"))\n\n# tq_mutate_fun_options() returns list of compatible mutate functions by pkg \nall_returns_daily <- mult_stocks |> \n    group_by(symbol) |>\n    tq_transmute(select     = adjusted,\n                 mutate_fun = periodReturn, \n                 period     = \"daily\", \n                 type       = \"log\")\n\nall_returns_monthly <- mult_stocks |> \n    group_by(symbol) |> \n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"monthly\",\n                 type       = \"log\")\n\n# reframe() has apparently replaced summarize()\nquantiles_daily <- all_returns_daily |> \n    group_by(symbol) |> \n    reframe(quantiles = quantile(daily.returns, probs = c(0.05, 0.95)))\n\nquantiles_monthly <- all_returns_monthly |> \n    group_by(symbol) |> \n    reframe(quantiles = quantile(monthly.returns, probs = c(0.05, 0.95)))\n\n# 5% quantile for each stock, DAILY\nPG_05d <- quantiles_daily$quantiles[1]\nJPM_05d <- quantiles_daily$quantiles[3]\nNVDA_05d <- quantiles_daily$quantiles[5]\nmean_d <- mean(all_returns_daily$daily.returns) \n\n# 5% quantile for each stock, MONTHLY\nPG_05m <- quantiles_monthly$quantiles[1]\nJPM_05m <- quantiles_monthly$quantiles[3]\nNVDA_05m <- quantiles_monthly$quantiles[5]\nmean_m <- mean(all_returns_monthly$monthly.returns)\n\n# I probably spend too much time tinkering with colors\n# col_ticker_fills <- c(\"PG\" = \"blue\", \"JPM\" = \"yellow\", \"NVDA\" = \"red\")\n# col_ticker_fills <- c(\"PG\" = \"#90EE90\", \"JPM\" = \"#ff6347\", \"NVDA\" = \"#8B0000\")\ncol_ticker_fills <- c(\"PG\" = \"chartreuse2\", \"JPM\" = \"dodgerblue2\", \"NVDA\" = \"coral1\")\ncol_ticker_colors <- c(\"PG\" = \"chartreuse3\", \"JPM\" = \"dodgerblue3\", \"NVDA\" = \"coral3\")\ncol_PG_line <- \"chartreuse3\"; col_JPM_line <- \"dodgerblue3\"; col_NVDA_line <- \"coral3\"\n\np_hist_daily <- all_returns_daily |> \n    ggplot(aes(x = daily.returns, fill = symbol, color = symbol)) +\n    geom_density(alpha = 0.50) +\n    geom_vline(xintercept = PG_05d, color = col_PG_line, linetype = \"dashed\", linewidth = 1) +\n    geom_vline(xintercept = JPM_05d, color = col_JPM_line, linetype = \"dashed\", linewidth = 1) + \n    geom_vline(xintercept = NVDA_05d, color = col_NVDA_line, linetype = \"dashed\", linewidth = 1) +\n    geom_vline(xintercept = mean_d, color = \"black\", linewidth = 0.4) +\n    scale_fill_manual(values = col_ticker_fills) +\n    scale_color_manual(values = col_ticker_fills) +\n    theme_minimal() +\n    coord_cartesian(xlim = c(-0.25, 0.25)) +\n        theme(\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n    )\n\np_hist_monthly <- all_returns_monthly |> \n    ggplot(aes(x = monthly.returns, fill = symbol, color = symbol)) +\n    geom_density(alpha = 0.50) +\n    geom_vline(xintercept = PG_05m, color = col_PG_line, linetype = \"dashed\", linewidth = 1) +\n    geom_vline(xintercept = JPM_05m, color = col_JPM_line, linetype = \"dashed\", linewidth = 1) + \n    geom_vline(xintercept = NVDA_05m, color = col_NVDA_line, linetype = \"dashed\", linewidth = 1) +\n    geom_vline(xintercept = mean_m, color = \"black\", linewidth = 0.4) +\n    scale_fill_manual(values = col_ticker_fills) +\n    scale_color_manual(values = col_ticker_fills) +\n    theme_minimal() + \n    coord_cartesian(xlim = c(-0.25, 0.25)) +\n    theme(\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n    )\n\np_hs <- p_hist_daily / p_hist_monthly\np_hs\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n### Bootstrap HS\n\nFirst let's simulate a single one-year forward (+ 12 months) path\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all_returns_monthly is tidy, but the simulation wants a wide format\nall_returns_monthly_wide <- all_returns_monthly |> \n  pivot_wider(names_from = symbol, values_from = monthly.returns)\n\n# Initial investment (into each stock)\ninitial_investment <- 100\nportfolio <- setNames(data.frame(t(rep(initial_investment, times = length(symbols)))), symbols)\nmonths_to_simulate <- 12 # Set X months for the simulation\n\n# Simulate one forward month\nsimulate_one_month <- function(portfolio, historical_returns_wide) {\n    # Randomly sample one month's returns (with replacement)\n    sampled_returns <- historical_returns_wide |>  \n        sample_n(1, replace = TRUE) |> select(-date) \n    # Apply the sampled log returns to the current portfolio value\n    updated_portfolio <- portfolio * exp(sampled_returns)\n    # FOR TESTING: print(sampled_returns[1,]); print(updated_portfolio[1,])\n    return(updated_portfolio)\n}\n\n# Run the simulation for X months\nset.seed(123) # For reproducibility of results\nsimulation_results <- tibble(Month = 0, TotalValue = sum(portfolio))\nfor (i in 1:months_to_simulate) {\n    portfolio <- simulate_one_month(portfolio, all_returns_monthly_wide)\n    simulation_results <- simulation_results |>  \n        add_row(Month = i, TotalValue = sum(portfolio))\n}\n\nprint(simulation_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 Ã— 2\n   Month TotalValue\n   <dbl>      <dbl>\n 1     0       300 \n 2     1       294.\n 3     2       325.\n 4     3       329.\n 5     4       316.\n 6     5       314.\n 7     6       349.\n 8     7       356.\n 9     8       312.\n10     9       313.\n11    10       326.\n12    11       349.\n13    12       336.\n```\n:::\n:::\n\n\nNext let's add a loop to run the simulation multiple times; e.g. 20 trials\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n# library(ggside) couldn't pull it off! \n\n# Function to simulate portfolio over X months, where each trail has a trial_id\nsimulate_portfolio <- function(months_to_simulate, historical_returns_wide, initial_investment, trial_id) {\n    # Initialize portfolio\n    portfolio <- setNames(data.frame(t(rep(initial_investment, times = length(symbols)))), symbols)\n    # Initialize results data frame with Month 0\n    simulation_results <- tibble(Month = 0, TotalValue = sum(portfolio), Trial = as.factor(trial_id))\n    for (i in 1:months_to_simulate) {\n        portfolio <- simulate_one_month(portfolio, historical_returns_wide)\n        simulation_results <- simulation_results |> \n            add_row(Month = i, TotalValue = sum(portfolio), Trial = as.factor(trial_id))\n    }\n  return(simulation_results)\n}\n\nmonths_to_simulate <- 12 \nnum_trials <- 20 # Number of trials\n\nset.seed(123) \nall_trials <- map_df(1:num_trials, \n                     ~simulate_portfolio(months_to_simulate, all_returns_monthly_wide, initial_investment, .x), \n                     .id = \"Trial_ID\")\n\nfinal_month_values_df <- all_trials |> \n    filter(Month == max(all_trials$Month))\n\n# Plot the results using ggplot2\np_forward_sim <- ggplot(all_trials, aes(x = Month, y = TotalValue, group = Trial, color = Trial)) +\n    geom_line() +\n    scale_color_viridis_d(option = \"plasma\", direction = -1) +\n    theme_minimal() +\n    scale_x_continuous(breaks = 1:12, limits = c(0,12)) +\n    labs(x = \"Month\",\n         y = \"Portfolio Value\") +\n    theme(legend.position = \"none\") \n\ndensity_plot <- final_month_values_df |> ggplot(aes(x = TotalValue)) +\n    geom_density(fill = \"#933fbd\", alpha = 0.5) +\n        theme_minimal() + \n    theme(\n        axis.title = element_blank(),\n        axis.text = element_blank()\n    ) +\n    coord_flip()\n\np_boot <- p_forward_sim + density_plot + \n    plot_layout(ncol = 2, widths = c(3, 1))\np_boot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfinal_month_values_vct <- final_month_values_df |> \n    pull(TotalValue) # 'pull' extracts the column as a vector\n\n# Calculate and print the quantiles for the final month's values\nquantiles_final_month <- quantile(final_month_values_vct, probs = c(0, 0.01, 0.05, 0.50, 1.0))\nprint(quantiles_final_month)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      0%       1%       5%      50%     100% \n218.1582 233.4910 294.8225 371.7793 567.0860 \n```\n:::\n:::\n\n\n### Monte carlos simulation (MCS)\n\nFirst a single path:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_gbm <- function(price, mu, sigma, periods) {\n  dt <- 1/52  # we'll assume period is one week\n  stock_prices <- numeric(periods)\n  stock_prices[1] <- price\n\n    for(t in 2:periods) {\n    Z <- rnorm(1) # random standar normal quantile\n    \n    # GBM\n    stock_prices[t] <- stock_prices[t-1] * exp((mu - 0.5 * sigma^2) * dt + sigma * sqrt(dt) * Z)\n    }\n  return(stock_prices)\n}\n\nset.seed(952347)\nsim_prices <- sim_gbm(100, 0.09, 0.3, 50)\nsim_prices_df <- as_tibble(sim_prices) |> rownames_to_column(\"period\")\nsim_prices_df$period <- as.integer(sim_prices_df$period)\n\n# Plot the simulated stock price path\nsim_prices_df |> \n    ggplot(aes(x = period, y = value)) + \n    geom_line() + \n    theme_minimal() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNow multiple (say 20) trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_gbm_matrix <- function(price, mu, sigma, periods, simulations) {\n  dt <- 1/52  \n  stock_prices <- matrix(price, nrow = periods, ncol = simulations)\n  for(t in 2:periods) {\n    Z <- rnorm(simulations)\n    stock_prices[t, ] <- stock_prices[t-1, ] * exp((mu - 0.5 * sigma^2) * dt + sigma * sqrt(dt) * Z)\n  }\n  return(stock_prices)\n}\n\nset.seed(84923)\nsimulations <- 20\nsim_stock_prices_matrix <- sim_gbm_matrix(100, 0.09, 0.3, 50, simulations)\n\nsim_stock_prices_df <- as_tibble(sim_stock_prices_matrix, .name_repair = \"minimal\")\nnames(sim_stock_prices_df) <- 1:ncol(sim_stock_prices_df)\nsim_stock_prices_df <- sim_stock_prices_df |> rownames_to_column(\"period\")\nsim_stock_prices_df$period <- as.integer(sim_stock_prices_df$period)\n\nsim_stock_prices_long <- sim_stock_prices_df |> \n  pivot_longer(cols = !period, names_to = \"Trial\", values_to = \"Price\")\n\np_mcs <- sim_stock_prices_long |> ggplot(aes(x = period, y = Price, group = Trial, color = Trial)) +\n    geom_line() +\n    labs(x = \"Week\",\n         y = \"Price\") +\n    theme_minimal() +\n    theme(\n        legend.position = \"none\"\n    ) +\n    scale_color_viridis_d()\n\np_mcs + ggtitle(\"GBM MCS: 20 trials x 50 weeks\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Parametric: normally distributed arithmetic returns\n\nThe basic starting point: normal, arithmetic returns and scaling per the square root rule (SRR) which asumes i.i.d. returns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Parameters\nmu_pa <- 0.09\nsigma_pa <- 0.20\nhorizon <- 12/52\n\nmu <- mu_pa * horizon  # horizon return\nsigma <- sigma_pa * sqrt(horizon)  # horizon volatility\nconfidence_level <- 0.95\ninvestment_value <- 100  # Initial investment\n\n# Find the Z-score that corresponds to the confidence level\nz_score <- qnorm(confidence_level)\nVaR <- (-mu + sigma * z_score) * investment_value\n\n# Create a dataframe of returns for plotting\nreturns <- data.frame(Returns = seq(-0.30, 0.30, by = 0.001))\nreturns$Density <- dnorm(returns$Returns, mean = mu, sd = sigma)\n\n# Plot with ggplot\np_pVaR <- ggplot(returns, aes(x = Returns, y = Density)) +\n    geom_line(color = \"dodgerblue\", linewidth = 1.3) +\n    geom_vline(xintercept = -VaR / investment_value, color = \"darkred\", linetype = \"dashed\", linewidth = 1.3) +\n    geom_area(data = subset(returns, Returns < -VaR / investment_value),\n              aes(x = Returns, y = Density), fill = \"coral1\", alpha = 0.5) +\n    geom_vline(xintercept = mu, color = \"chartreuse3\", linetype = \"dashed\", linewidth = 1.3) + \n    geom_vline(xintercept = 0, color = \"black\", linewidth = 0.4) +\n    scale_x_continuous(labels = percent_format(),\n                       breaks = seq(-0.30, 0.30, by = 0.1)) +\n    theme_minimal() +\n    theme(\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank()\n    ) + \n    annotate(\"text\", x = -VaR / investment_value + .02, \n             y = max(returns$Density)/3,\n             label = paste(\"VaR at\", scales::percent(confidence_level), \"=\", round(VaR, 3)),\n             hjust = 1.2, vjust = 0, size = 4, color = \"darkred\", fontface = \"bold\")\n\np_pVaR + ggtitle(\"Normal, arithmetic i.i.d. returns\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nFor fun: Using patchwork to print the social thumbnail!\n\n::: {.cell}\n\n```{.r .cell-code}\n# layout <- \"\n# AABBCC\n# AABBCC\n# DDDDEE\n# DDDDEE\n# \"\n# \n# p_hs + p_pVaR + p_boot + p_mcs +\n#    plot_layout(design = layout)\n\np_hs / p_boot / (p_mcs + p_pVaR)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
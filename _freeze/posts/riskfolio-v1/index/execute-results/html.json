{
  "hash": "128b452b9998242df83c3b40dc2fae29",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Riskfolio-Lib is a python library for optimation\"\ndescription: Description goes here\nauthor: David Harper, CFA, FRM\ndate: 2024-05-12\ncategories: [code, analysis]\nengines:\n  r: knitr\n  python: reticulate\n\n---\n\n\n\n# Riskfolio-Lib is a python library for optimation\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# will cut this out after I make sure I grok the different YAML params\n# ... many of which turned out to be unnecessary only AFTER I \n# upgraded Quarto to the prerelease version. So what I thought were\n# YAML problems were maybe bugs\n# prior v2\n# jupyter: python3\n# python:\n# path: \"D:/anaconda3/python.exe\"\n\n# initial YAML v1\n# engines:\n# r: default\n# jupyter: python3\n# format:\n# html:\n#    code-fold: true\n\nimport numpy as np\nimport pandas as pd\nimport riskfolio as rp\nimport matplotlib.pyplot as plt\nimport yfinance as yf\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\npd.options.display.float_format = '{:.4%}'.format\n\n# Date range\nstart = '2021-03-31'\nend =   '2024-05-10'\n\n# Tickers of assets\n\nassets = ['TMHC', 'LEN', 'ESTC', 'DHI', 'INVH', \n          'GOOGL', 'COUR', 'DT', 'META', 'DDOG', \n          'HASI', 'AMH', 'DBX', 'ZUO', 'BLK',\n          'DELL', 'TJX', 'O', 'STAG', 'ENB']\n\nassets.sort()\n\n# Downloading data\ndata = yf.download(assets, start = start, end = end)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[                       0%%                      ]\n[*****                 10%%                      ]  2 of 20 completed\n[*******               15%%                      ]  3 of 20 completed\n[**********            20%%                      ]  4 of 20 completed\n[************          25%%                      ]  5 of 20 completed\n[**************        30%%                      ]  6 of 20 completed\n[*****************     35%%                      ]  7 of 20 completed\n[*******************   40%%                      ]  8 of 20 completed\n[**********************45%%                      ]  9 of 20 completed\n[**********************50%%                      ]  10 of 20 completed\n[**********************55%%                      ]  11 of 20 completed\n[**********************60%%***                   ]  12 of 20 completed\n[**********************65%%*****                 ]  13 of 20 completed\n[**********************70%%********              ]  14 of 20 completed\n[**********************75%%**********            ]  15 of 20 completed\n[**********************80%%************          ]  16 of 20 completed\n[**********************85%%***************       ]  17 of 20 completed\n[**********************90%%*****************     ]  18 of 20 completed\n[**********************95%%********************  ]  19 of 20 completed\n[*********************100%%**********************]  20 of 20 completed\n```\n\n\n:::\n\n```{.python .cell-code}\ndata = data.loc[:,('Adj Close', slice(None))]\ndata.columns = assets\n\nY = data[assets].pct_change().dropna()\n\nprint(Y.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                AMH      BLK     COUR  ...      TJX     TMHC      ZUO\nDate                                   ...                           \n2021-04-01  2.6695%  1.7070%  1.7333%  ... -0.2570%  2.7913%  1.2838%\n2021-04-05 -1.3147%  2.2417%  8.3661%  ...  2.6978%  2.5576%  0.0000%\n2021-04-06  1.6578% -0.2946% 13.3441%  ... -0.1771% -0.7697%  2.2682%\n2021-04-07 -0.4077%  0.8046%  3.1478%  ...  0.2070% -2.3891% -1.9569%\n2021-04-08  0.0000%  1.5990% -3.4483%  ...  1.8442% -2.7336% 12.4418%\n\n[5 rows x 20 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\n#\n#\n\naverage_returns = Y.mean()\nvolatilities = Y.std()\ncov_matrix = Y.cov()\n\nprint(\"Average Returns:\\n\", average_returns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAverage Returns:\n AMH      0.0297%\nBLK      0.0301%\nCOUR    -0.1420%\nDBX      0.0046%\nDDOG     0.1143%\nDELL     0.1776%\nDHI      0.0939%\nDT       0.0328%\nENB      0.0345%\nESTC     0.0653%\nGOOGL    0.0838%\nHASI     0.0057%\nINVH     0.0337%\nLEN      0.0881%\nMETA     0.1078%\nO        0.0115%\nSTAG     0.0354%\nTJX      0.0696%\nTMHC     0.1139%\nZUO      0.0100%\ndtype: float64\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(\"Volatilities:\\n\", volatilities)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVolatilities:\n AMH     1.4660%\nBLK     1.7092%\nCOUR    3.5182%\nDBX     2.0984%\nDDOG    3.8260%\nDELL    2.5601%\nDHI     2.1771%\nDT      2.7356%\nENB     1.2504%\nESTC    3.8681%\nGOOGL   1.9961%\nHASI    3.3490%\nINVH    1.5113%\nLEN     2.1445%\nMETA    3.0246%\nO       1.2524%\nSTAG    1.5397%\nTJX     1.5504%\nTMHC    2.4480%\nZUO     3.2840%\ndtype: float64\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(\"Covariance Matrix:\\n\", cov_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCovariance Matrix:\n           AMH     BLK    COUR     DBX  ...    STAG     TJX    TMHC     ZUO\nAMH   0.0215% 0.0124% 0.0143% 0.0105%  ... 0.0158% 0.0078% 0.0158% 0.0169%\nBLK   0.0124% 0.0292% 0.0207% 0.0166%  ... 0.0152% 0.0138% 0.0228% 0.0267%\nCOUR  0.0143% 0.0207% 0.1238% 0.0280%  ... 0.0146% 0.0150% 0.0258% 0.0492%\nDBX   0.0105% 0.0166% 0.0280% 0.0440%  ... 0.0108% 0.0112% 0.0210% 0.0351%\nDDOG  0.0193% 0.0275% 0.0568% 0.0378%  ... 0.0188% 0.0185% 0.0342% 0.0699%\nDELL  0.0093% 0.0175% 0.0141% 0.0147%  ... 0.0111% 0.0108% 0.0232% 0.0222%\nDHI   0.0143% 0.0204% 0.0226% 0.0187%  ... 0.0164% 0.0154% 0.0454% 0.0274%\nDT    0.0138% 0.0222% 0.0413% 0.0325%  ... 0.0138% 0.0162% 0.0243% 0.0525%\nENB   0.0072% 0.0106% 0.0073% 0.0066%  ... 0.0079% 0.0063% 0.0107% 0.0109%\nESTC  0.0204% 0.0274% 0.0639% 0.0415%  ... 0.0199% 0.0192% 0.0315% 0.0685%\nGOOGL 0.0106% 0.0179% 0.0253% 0.0206%  ... 0.0119% 0.0112% 0.0218% 0.0282%\nHASI  0.0205% 0.0237% 0.0350% 0.0213%  ... 0.0220% 0.0142% 0.0305% 0.0419%\nINVH  0.0197% 0.0132% 0.0143% 0.0100%  ... 0.0162% 0.0082% 0.0163% 0.0173%\nLEN   0.0145% 0.0204% 0.0234% 0.0185%  ... 0.0168% 0.0154% 0.0444% 0.0285%\nMETA  0.0140% 0.0222% 0.0359% 0.0264%  ... 0.0151% 0.0152% 0.0296% 0.0362%\nO     0.0116% 0.0098% 0.0090% 0.0065%  ... 0.0129% 0.0061% 0.0127% 0.0114%\nSTAG  0.0158% 0.0152% 0.0146% 0.0108%  ... 0.0237% 0.0086% 0.0190% 0.0184%\nTJX   0.0078% 0.0138% 0.0150% 0.0112%  ... 0.0086% 0.0240% 0.0167% 0.0168%\nTMHC  0.0158% 0.0228% 0.0258% 0.0210%  ... 0.0190% 0.0167% 0.0599% 0.0300%\nZUO   0.0169% 0.0267% 0.0492% 0.0351%  ... 0.0184% 0.0168% 0.0300% 0.1078%\n\n[20 rows x 20 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\n# Building the portfolio object\nport = rp.Portfolio(returns=Y)\n\n# Calculating optimal portfolio\n\n# Select method and estimate input parameters:\n\nmethod_mu='hist' # Method to estimate expected returns based on historical data.\nmethod_cov='hist' # Method to estimate covariance matrix based on historical data.\n\nport.assets_stats(method_mu=method_mu, method_cov=method_cov, d=0.94)\n\n# Estimate optimal portfolio:\n\nmodel='Classic' # Could be Classic (historical), BL (Black Litterman) or FM (Factor Model)\nrm = 'MV' # Risk measure used, this time will be variance\nobj = 'Sharpe' # Objective function, could be MinRisk, MaxRet, Utility or Sharpe\nhist = True # Use historical scenarios for risk measures that depend on scenarios\nrf = 0 # Risk free rate\nl = 0 # Risk aversion factor, only useful when obj is 'Utility'\n\nw = port.optimization(model=model, rm=rm, obj=obj, rf=rf, l=l, hist=hist)\n\nprint(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       weights\nAMH    0.0000%\nBLK    0.0000%\nCOUR   0.0000%\nDBX    0.0000%\nDDOG   0.6043%\nDELL  47.9516%\nDHI    0.0000%\nDT     0.0000%\nENB    0.0000%\nESTC   0.0000%\nGOOGL 11.1558%\nHASI   0.0000%\nINVH   0.0000%\nLEN    0.0000%\nMETA   1.3875%\nO      0.0000%\nSTAG   0.0000%\nTJX   28.5279%\nTMHC  10.3729%\nZUO    0.0000%\n```\n\n\n:::\n\n```{.python .cell-code}\n#\n# Plotting the composition of the portfolio\nplt.figure(figsize=(10, 6))\nax = rp.plot_pie(w=w, title='Sharpe Mean Variance', others=0.05, \nnrow=25, cmap = \"tab20\", height=3, width=5, ax=None)\n\npoints = 50 # Number of points of the frontier\nfrontier = port.efficient_frontier(model=model, rm=rm, points=points, rf=rf, hist=hist)\nprint(frontier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            0        1        2        3   ...       46       47       48        49\nAMH    5.0343%  4.8209%  4.3502%  3.9823%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nBLK    0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nCOUR   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nDBX    4.1011%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nDDOG   0.0000%  0.0000%  0.0000%  0.0000%  ...  1.6982%  1.3297%  0.9711%   0.0000%\nDELL   1.3745%  9.7606% 13.4684% 16.3418%  ... 94.0017% 96.0515% 98.0499% 100.0000%\nDHI    0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nDT     0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nENB   34.9365% 31.9075% 30.3225% 29.0943%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nESTC   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nGOOGL  4.2815%  8.1264%  9.1584%  9.9584%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nHASI   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nINVH   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nLEN    0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nMETA   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nO     33.2404% 23.7638% 19.3733% 15.9726%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nSTAG   0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nTJX   17.0318% 21.6208% 23.3272% 24.6505%  ...  0.0000%  0.0000%  0.0000%   0.0000%\nTMHC   0.0000%  0.0000%  0.0000%  0.0000%  ...  4.3001%  2.6189%  0.9790%   0.0000%\nZUO    0.0000%  0.0000%  0.0000%  0.0000%  ...  0.0000%  0.0000%  0.0000%   0.0000%\n\n[20 rows x 50 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\n\n# Plotting the efficient frontier\n\nlabel = 'Max Risk Adjusted Return Portfolio' # Title of point\nmu = port.mu # Expected returns\ncov = port.cov # Covariance matrix\nreturns = port.returns # Returns of the assets\nplt.figure(figsize=(10, 6))\nax = rp.plot_frontier(w_frontier=frontier, mu=mu, cov=cov, returns=returns, rm=rm,\n                      rf=rf, alpha=0.05, cmap='viridis', w=w, label=label,\n                      marker='*', s=16, c='r', height=3, width=5, ax=None)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=480}\n:::\n:::\n\n\n\nNow we switch to R so we can use ggplot2 (quick version, not fancy)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nlibrary(tidyverse)\n\nfrontier_r <- py$frontier # frontier_r is a dataframe: 20obs * 50vars\naverage_returns_r <- py$average_returns # vector length = 20\nvolatilities_r <- py$volatilities # vector length = 20\ncov_matrix_r <- py$cov_matrix # dataframe: 20r * 20c matrix\n\nfrontier_matrix <- as.matrix(frontier_r) # 20r * 50c matrix\naverage_returns_matrix <- matrix(average_returns_r, nrow = 1) # 1r * 20c matrix \n\n# Below is (1r * 20c) * (20r * 50c) = 1r * 50c matrix\nexpected_returns <-  average_returns_matrix %*% frontier_matrix \n\n# Convert cov_matrix_r to a matrix if it's not already\ncov_matrix <- as.matrix(cov_matrix_r)\n\n# Calculate the risk (standard deviation) for each portfolio\nportfolio_risks <- apply(frontier_matrix, 2, function(weights) {\n  sqrt(t(weights) %*% cov_matrix %*% weights)\n})\n\n# Since expected_returns is a 1*50 matrix, convert it to a vector to match the length of portfolio_risks\nexpected_returns_vector <- as.vector(expected_returns)\n\n# Create a data frame for plotting\nfrontier_data <- data.frame(Risk = portfolio_risks, Return = expected_returns_vector)\n\n# Plot the efficient frontier using ggplot2\nlibrary(ggplot2)\nefficient_frontier_plot <- ggplot(frontier_data, aes(x = Risk, y = Return)) +\n  geom_line(color = \"seagreen\", size = 1) +\n  theme_minimal() +\n  labs(x = \"Risk (Standard Deviation)\", \n       y = \"Expected Return\", title = \"Efficient Frontier (but DAILY)\") +\n  geom_point(color = \"aquamarine\", size = 2)  # Highlight each portfolio point\n\n# Print the plot\nprint(efficient_frontier_plot)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "819175176da296afcc4543560f9324c8",
  "result": {
    "markdown": "---\ntitle: Simulating the equity risk premium\ndescription: The implied ERP is very sensitive to assumptions, in particular G2\nauthor: David Harper, CFA, FRM\ndate: 2023-08-31\ncategories: [code, analysis]\n---\n\n\n\n\nThe following implements the implied ERP approach in Professor Damodaran's post on the The [Price of Risk](https://aswathdamodaran.substack.com/p/the-price-of-risk-with-equity-risk). My intention is to briefly explore its sensitivity to assumptions. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n\n```{.r .cell-code}\nsolve_for_R <- function(RF, ER_vector, CP_vector, G2, PV) {\n  \n  # Calculate cash flow vector\n  CF_vector <- ER_vector * CP_vector\n  \n  # Define the objective function\n  objective_function <- function(R) {\n    # This is effectively two-stage dividend discount model except the initial stage is explicated\n    # such that there exists no G1 and G2 refers to the subsequent period of growth\n    \n    PV_calculated <- sum(CF_vector[1:5] / (1 + R)^(1:5)) + CF_vector[6] / ((R - G2) * (1 + R)^5)\n    return((PV - PV_calculated)^2)\n  }\n  \n  # Use the optim function to minimize the objective function\n  result <- optim(par = RF, fn = objective_function, method = \"Brent\", lower = -1, upper = 2)\n  \n  return(result$par)\n}\n\nRF <- 0.04 # I have rounded his riskfree rate of 3.97% to 4.00%\nER_vector <- c(217.8, 245.2, 273.7, 295.1, 308.9, 324.9) # A. Damodaran's earnings vector\nCP_vector <- c(0.84, 0.82, 0.80, 0.78, 0.77, 0.77) # Cash payout ratios\nG2 <- 0.04 # His model sets the stable growth equal to the RF rate\nPV <- 4600 # I rounded 4588.96 to 4,600\n\nimplied_equity <- solve_for_R(RF, ER_vector, CP_vector, G2, PV)\nimplied_ERP <- implied_equity - RF\n\n# Number of simulations\nn_simulations <- 10000\ncoeff_variation <- 0.10 # Arbitrarily suggesting that COV of 10% is tight\n\n# Assumed means and standard deviations for inputs\nmean_RF <- RF; sd_RF <- RF * coeff_variation\nmean_ER <- ER_vector; sd_ER <- ER_vector * coeff_variation\nmean_CP <- CP_vector; sd_CP <- CP_vector * coeff_variation\nmean_G2 <- G2; sd_G2 <- G2 * coeff_variation\nmean_PV <- PV; sd_PV <- PV * coeff_variation\n\n# MC simulation\nset.seed(379)\nR_values <- replicate(n_simulations, \n  solve_for_R(\n    # RF = rnorm(1, mean_RF, sd_RF),\n    RF = RF,\n    ER_vector = rnorm(6, mean_ER, sd_ER),\n    CP_vector = rnorm(6, mean_CP, sd_CP),\n    G2 = rnorm(1, mean_G2, sd_G2),\n    PV = PV\n  )\n)\n\n# Histogram to visualize the distribution of R values\nR_values <- R_values[R_values > 0]\nERP_values <- R_values - RF\nERP_values_mean <- mean(ERP_values)\nERP_values_df <- as_data_frame(ERP_values)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as_data_frame()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` (with slightly different semantics) to convert to a\n  tibble, or `as.data.frame()` to convert to a data frame.\n```\n:::\n\n```{.r .cell-code}\nERP_values_df %>% ggplot(aes(value)) +\n    geom_histogram(color = \"darkblue\", fill = \"lightblue\") +\n    geom_vline(aes(xintercept = ERP_values_mean), color = \"darkgreen\", size = 1.5) +\n    scale_x_continuous(labels = percent_format(0.01)) +\n    labs(title = \"Implied equity risk premium, ERP (n = 10,000 sims)\",\n         subtitle = \"Under tight assumption dispersion (CV = σ/μ =10%). Green vertical line is the mean.\",\n         y = \"Count\") +\n    # xlab(\"X label\") + \n    # ylab(\"Count\") +\n    theme_classic() +\n    theme(axis.title = element_blank(),\n          axis.text = element_text(size = 12, face = \"bold\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nQuick check on the distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(moments)\nskewness(ERP_values_df$value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.08903814\n```\n:::\n\n```{.r .cell-code}\nkurtosis(ERP_values_df$value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.997992\n```\n:::\n\n```{.r .cell-code}\nquantiles_v <- c(0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.975, 0.99)\nquantile(ERP_values_df$value, probs = quantiles_v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        1%       2.5%         5%        10%        25%        50%        75% \n0.03041180 0.03248300 0.03433620 0.03649075 0.04004356 0.04410500 0.04832614 \n       90%        95%      97.5%        99% \n0.05209407 0.05447292 0.05638444 0.05881702 \n```\n:::\n:::\n\n\nWhat is the relationship between the sustainable growth rate, G2, and the ERP?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG2_values <- seq(from = 0.02, to = 0.06, by = 0.001)\nR_values <- map_dbl(G2_values, function(G2) {\n  solve_for_R(\n    RF = RF,\n    ER_vector = ER_vector,\n    CP_vector = CP_vector,\n    G2 = G2,\n    PV = PV\n  )\n})\n\nERP_values <- R_values - RF\n\nG_vs_ERP <-  tibble(\n  G2 = G2_values,\n  ERP = ERP_values\n)\n\nG_vs_ERP %>% ggplot(aes(x = G2, y = ERP)) + \n  geom_point() + \n  coord_cartesian(ylim = c(.02, .08)) + \n  labs(title = \"Implied ERP as function of sustainable growth rate, G2\",\n       subtitle = \"Unlike prior/next visualization, predicted vectors are not randomized\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAnd just for fun, let's add randomness to the earnings and cash payout vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG2_values <- seq(from = 0.02, to = 0.06, by = 0.001)\n\nR_values <- map(G2_values, function(G2) {\n  replicate(30, {\n    solve_for_R(\n      RF = RF,\n      ER_vector = rnorm(6, mean_ER, sd_ER),\n      CP_vector = rnorm(6, mean_CP, sd_CP),\n      G2 = G2,\n      PV = PV\n    ) - RF # subtracting RF here inside replicat\n  })\n})\n\ndf <- tibble(\n  G2 = G2_values,\n  ERP = R_values\n) %>% unnest()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using `unnest()`.\nℹ Please use `cols = c(ERP)`.\n```\n:::\n\n```{.r .cell-code}\nmodel_line <- lm(ERP ~ G2, data = df)\nrsq <- summary(model_line)$r.squared\nlabel_R2 <- sprintf(\"R^2 = %.2f\", rsq)\n\ndf %>% ggplot(aes(x = G2, y = ERP)) + \n  geom_point() +\n  coord_cartesian(ylim = c(.02, .08)) + \n  geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\n  labs(title = \"Restores 10% CV randomness to earnings and payout vectors\") +\n  annotate(\"text\", x=0.025, y=0.065, label=label_R2, fontface=\"bold\", hjust=0)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # geom_text(aes(label = label_R2))\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}